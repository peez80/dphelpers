
package de.stiffi.media.telestreamvantage.api.generated;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebService(name = "IWorkflow", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface IWorkflow {


    /**
     * 
     * @param identifier
     * @return
     *     returns de.stiffi.media.telestreamvantage.api.generated.ArrayOfItem
     * @throws IWorkflowGetWorkflowItemRequirementsWorkflowDoesNotExistExceptionFaultFaultMessage
     * @throws IWorkflowGetWorkflowItemRequirementsUnlicensedSdkExceptionFaultFaultMessage
     */
    @WebMethod(operationName = "GetWorkflowItemRequirements", action = "http://Telestream.Vantage.Sdk/2010/07/IWorkflow/GetWorkflowItemRequirements")
    @WebResult(name = "GetWorkflowItemRequirementsResult", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
    @RequestWrapper(localName = "GetWorkflowItemRequirements", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.GetWorkflowItemRequirements")
    @ResponseWrapper(localName = "GetWorkflowItemRequirementsResponse", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.GetWorkflowItemRequirementsResponse")
    public ArrayOfItem getWorkflowItemRequirements(
        @WebParam(name = "identifier", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
        String identifier)
        throws IWorkflowGetWorkflowItemRequirementsUnlicensedSdkExceptionFaultFaultMessage, IWorkflowGetWorkflowItemRequirementsWorkflowDoesNotExistExceptionFaultFaultMessage
    ;

    /**
     * 
     * @param identifier
     * @return
     *     returns de.stiffi.media.telestreamvantage.api.generated.Context
     * @throws IWorkflowGetWorkflowVariableRequirementsUnlicensedSdkExceptionFaultFaultMessage
     * @throws IWorkflowGetWorkflowVariableRequirementsWorkflowDoesNotExistExceptionFaultFaultMessage
     */
    @WebMethod(operationName = "GetWorkflowVariableRequirements", action = "http://Telestream.Vantage.Sdk/2010/07/IWorkflow/GetWorkflowVariableRequirements")
    @WebResult(name = "GetWorkflowVariableRequirementsResult", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
    @RequestWrapper(localName = "GetWorkflowVariableRequirements", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.GetWorkflowVariableRequirements")
    @ResponseWrapper(localName = "GetWorkflowVariableRequirementsResponse", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.GetWorkflowVariableRequirementsResponse")
    public Context getWorkflowVariableRequirements(
        @WebParam(name = "identifier", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
        String identifier)
        throws IWorkflowGetWorkflowVariableRequirementsUnlicensedSdkExceptionFaultFaultMessage, IWorkflowGetWorkflowVariableRequirementsWorkflowDoesNotExistExceptionFaultFaultMessage
    ;

    /**
     * 
     * @param identifier
     * @param filter
     * @return
     *     returns de.stiffi.media.telestreamvantage.api.generated.ArrayOfJobType
     * @throws IWorkflowGetJobsForWorkflowUnlicensedSdkExceptionFaultFaultMessage
     * @throws IWorkflowGetJobsForWorkflowWorkflowDoesNotExistExceptionFaultFaultMessage
     */
    @WebMethod(operationName = "GetJobsForWorkflow", action = "http://Telestream.Vantage.Sdk/2010/07/IWorkflow/GetJobsForWorkflow")
    @WebResult(name = "GetJobsForWorkflowResult", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
    @RequestWrapper(localName = "GetJobsForWorkflow", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.GetJobsForWorkflow")
    @ResponseWrapper(localName = "GetJobsForWorkflowResponse", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.GetJobsForWorkflowResponse")
    public ArrayOfJobType getJobsForWorkflow(
        @WebParam(name = "identifier", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
        String identifier,
        @WebParam(name = "filter", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
        WorkflowJobQualifierType filter)
        throws IWorkflowGetJobsForWorkflowUnlicensedSdkExceptionFaultFaultMessage, IWorkflowGetJobsForWorkflowWorkflowDoesNotExistExceptionFaultFaultMessage
    ;

    /**
     * 
     * @param identifier
     * @return
     *     returns de.stiffi.media.telestreamvantage.api.generated.WorkflowState
     * @throws IWorkflowGetWorkflowStateUnlicensedSdkExceptionFaultFaultMessage
     * @throws IWorkflowGetWorkflowStateWorkflowDoesNotExistExceptionFaultFaultMessage
     */
    @WebMethod(operationName = "GetWorkflowState", action = "http://Telestream.Vantage.Sdk/2010/07/IWorkflow/GetWorkflowState")
    @WebResult(name = "GetWorkflowStateResult", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
    @RequestWrapper(localName = "GetWorkflowState", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.GetWorkflowState")
    @ResponseWrapper(localName = "GetWorkflowStateResponse", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.GetWorkflowStateResponse")
    public WorkflowState getWorkflowState(
        @WebParam(name = "identifier", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
        String identifier)
        throws IWorkflowGetWorkflowStateUnlicensedSdkExceptionFaultFaultMessage, IWorkflowGetWorkflowStateWorkflowDoesNotExistExceptionFaultFaultMessage
    ;

    /**
     * 
     * @param identifier
     * @throws IWorkflowActivateUnlicensedSdkExceptionFaultFaultMessage
     * @throws IWorkflowActivateWorkflowDoesNotExistExceptionFaultFaultMessage
     * @throws IWorkflowActivateWorkflowInvalidStateExceptionFaultFaultMessage
     */
    @WebMethod(operationName = "Activate", action = "http://Telestream.Vantage.Sdk/2010/07/IWorkflow/Activate")
    @RequestWrapper(localName = "Activate", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.Activate")
    @ResponseWrapper(localName = "ActivateResponse", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.ActivateResponse")
    public void activate(
        @WebParam(name = "identifier", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
        String identifier)
        throws IWorkflowActivateUnlicensedSdkExceptionFaultFaultMessage, IWorkflowActivateWorkflowDoesNotExistExceptionFaultFaultMessage, IWorkflowActivateWorkflowInvalidStateExceptionFaultFaultMessage
    ;

    /**
     * 
     * @param identifier
     * @throws IWorkflowDeactivateUnlicensedSdkExceptionFaultFaultMessage
     * @throws IWorkflowDeactivateWorkflowDoesNotExistExceptionFaultFaultMessage
     */
    @WebMethod(operationName = "Deactivate", action = "http://Telestream.Vantage.Sdk/2010/07/IWorkflow/Deactivate")
    @RequestWrapper(localName = "Deactivate", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.Deactivate")
    @ResponseWrapper(localName = "DeactivateResponse", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07", className = "de.stiffi.media.telestreamvantage.api.generated.DeactivateResponse")
    public void deactivate(
        @WebParam(name = "identifier", targetNamespace = "http://Telestream.Vantage.Sdk/2010/07")
        String identifier)
        throws IWorkflowDeactivateUnlicensedSdkExceptionFaultFaultMessage, IWorkflowDeactivateWorkflowDoesNotExistExceptionFaultFaultMessage
    ;

}
